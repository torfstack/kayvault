// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package sqlc

import (
	"context"
)

const doesUserExist = `-- name: DoesUserExist :one
SELECT EXISTS(SELECT 1 FROM users WHERE subject = $1)
`

func (q *Queries) DoesUserExist(ctx context.Context, subject string) (bool, error) {
	row := q.db.QueryRow(ctx, doesUserExist, subject)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const insertSecret = `-- name: InsertSecret :exec
INSERT INTO secrets (value, key, url, tags, user_id)
VALUES ($1, $2, $3, $4, $5)
`

type InsertSecretParams struct {
	Value  []byte
	Key    string
	Url    string
	Tags   string
	UserID int32
}

func (q *Queries) InsertSecret(ctx context.Context, arg InsertSecretParams) error {
	_, err := q.db.Exec(ctx, insertSecret,
		arg.Value,
		arg.Key,
		arg.Url,
		arg.Tags,
		arg.UserID,
	)
	return err
}

const insertUser = `-- name: InsertUser :exec
INSERT INTO users (subject, email, full_name)
VALUES ($1, $2, $3)
`

type InsertUserParams struct {
	Subject  string
	Email    string
	FullName string
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) error {
	_, err := q.db.Exec(ctx, insertUser, arg.Subject, arg.Email, arg.FullName)
	return err
}

const selectSecrets = `-- name: SelectSecrets :many
SELECT id, value, key, url, tags, user_id, secret_sharing, created_at, updated_at FROM secrets
WHERE user_id = $1
`

func (q *Queries) SelectSecrets(ctx context.Context, userID int32) ([]Secret, error) {
	rows, err := q.db.Query(ctx, selectSecrets, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Secret
	for rows.Next() {
		var i Secret
		if err := rows.Scan(
			&i.ID,
			&i.Value,
			&i.Key,
			&i.Url,
			&i.Tags,
			&i.UserID,
			&i.SecretSharing,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectUserByName = `-- name: SelectUserByName :one
SELECT id, subject, email, full_name, created_at, updated_at FROM users
WHERE subject = $1
`

func (q *Queries) SelectUserByName(ctx context.Context, subject string) (User, error) {
	row := q.db.QueryRow(ctx, selectUserByName, subject)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Subject,
		&i.Email,
		&i.FullName,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateSecret = `-- name: UpdateSecret :exec
UPDATE secrets SET value = $1, key = $2, url = $3, tags = $4
WHERE user_id = $5 AND id = $6
`

type UpdateSecretParams struct {
	Value  []byte
	Key    string
	Url    string
	Tags   string
	UserID int32
	ID     int32
}

func (q *Queries) UpdateSecret(ctx context.Context, arg UpdateSecretParams) error {
	_, err := q.db.Exec(ctx, updateSecret,
		arg.Value,
		arg.Key,
		arg.Url,
		arg.Tags,
		arg.UserID,
		arg.ID,
	)
	return err
}
